# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml
service: double-opt-in

custom:
  domain: patternbox.com
  s3bucket: ${self:provider.deploymentPrefix}-${self:service}.${self:custom.domain}
  ddbTable: ${self:provider.deploymentPrefix}-${self:service}-email
  functionPrefix: ${self:provider.deploymentPrefix}-${self:service}

provider:
  name: aws
  stage: sandbox
  runtime: nodejs12.x
  region: ${env:AWS_MAIN_REGION}
  profile: ${env:AWS_PROFILE_INFRA}
  stackName: ${self:provider.stage}-${self:service}
  endpointType: regional
  deploymentBucket: ${env:INFRA_MAIN_BUCKET}
  deploymentPrefix: sandbox
  lambdaHashingVersion: 20201221

  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action:
        #- ses:SendEmail
        #- ses:SendRawEmail
        #- ses:SendBulkTemplatedEmail
        - ses:SendTemplatedEmail
      Resource: "*"

    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource:
        - arn:aws:s3:::${self:custom.s3bucket}

    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:HeadObject
        - s3:DeleteObject
      Resource:
        - arn:aws:s3:::${self:custom.s3bucket}/*

    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource: 
        - "*"
        
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.ddbTable}

  environment:
    s3bucket: ${self:custom.s3bucket}
    ddbTable: ${self:custom.ddbTable}
    #basePath: doi.${self:custom.domain}
    emailSource: no-reply@${self:custom.domain}
    ssmSecret: ${self:service}-secret
    hostName:
      Fn::Join:
        - ""
        - - Ref: "HttpApi"
          - ".execute-api."
          - ${self:provider.region}
          - ".amazonaws.com"

package:
  individually: false
  excludeDevDependencies: true
  patterns:
    - "!**"
    - "src/**"

functions:
  initiate:
    handler: src/handler.initiate
    name: ${self:custom.functionPrefix}-initiate
    events:
      - httpApi:
          path: /initiateDoubleOptIn
          method: post

  confirm:
    handler: src/handler.confirm
    name: ${self:custom.functionPrefix}-confirm
    events:
      - httpApi:
          path: /confirmDoubleOptIn/{userId}/{confirmToken}
          method: get

  revoke:
    handler: src/handler.revoke
    name: ${self:custom.functionPrefix}-revoke
    events:
      - httpApi:
          path: /revokeDoubleOptIn/{userId}/{revokeToken}
          method: get

resources:
  Resources:
    ResourcesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3bucket}

    TicketTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.ddbTable}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expirationTimeTTL
          Enabled: true
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # SesTemplate:
    #   Type: AWS::SES::Template
    #   Properties:
    #     Template:
    #       TemplateName: "double-opt-in"
    #       SubjectPart: "Double Opt-in"
    #       TextPart: "<p>By clicking on this link, you confirm your registration for our newsletter:</p><p><a href='{{confirmationURL}}'>Confirmation Link</a></p>"
    #       HtmlPart: "By clicking on this link, you confirm your registration for our newsletter:\r\n{{confirmationURL}}."

